/**
 * File:	include/security/routines.ycp
 * Module:	Security configuration
 * Summary:	Routines
 * Authors:	Michal Svec <msvec@suse.cz>
 *
 * $Id$
 *
 * These functions are used for the user interface creation
 * and interaction.
 * <pre>
 * Usage:
 *   include "security/ui.ycp";
 *   map WIDGETS = CallFunction(`your_widgets());
 * </pre>
 */

{

textdomain "security";

import "Security";
include "security/widgets.ycp";

/**
 * Return a widget from the WIDGETS map created acording to the ID.
 * @param ID security setting identifier
 * @return created widget
 * @see <a href="widgets.html">widgets.ycp</a>
 */
global define term settings2widget(string ID) ``{

    map m = WIDGETS[ID]:$[];
    string label = lookup(m,"Label","");
    string widget = lookup(m,"Widget","");
    string value = Security::Settings[ID]:"";

    /* "Widget" == "CheckBox" */
    if(widget == "CheckBox") {
        boolean enabled = false;
        if(value == "yes")
            enabled = true;
        return `VBox(
            `Left(`CheckBox(`id(ID), label, enabled)),
            VSeparator()
        );
    }

    /* "Widget" == "TextEntry" */
    if(widget == "TextEntry") {
        return `VBox(
            `Left(`TextEntry(`id(ID), label, value)),
            VSeparator()
        );
    }

    /* "Widget" == "IntField" */
    if(widget == "IntField") {
        return `VBox(
            `Left(`IntField(`id(ID), label, 0, 2147483647, tointeger(value))),
            VSeparator()
        );
    }

    /* "Widget" == "???" */
    if(widget != "ComboBox") {
        y2error("Unknown widget: %1", widget);
        return VSeparator();
    }

    /* "Widget" == "ComboBox" */
    list li = m["Options"]:[];
    list combo = [];
    integer i = 0;

    while(i < size(li)) {
        // string|list it
        any it = li[i]:"";
        string id_t = "";
        string id_s = "";
        if(is(it, string)) {
            id_t = it;
            id_s = it;
        }
        else {
            id_t = it[0]:"";
            id_s = it[1]:"";
        }
        if(value == id_t)
            combo = add(combo,`item(`id(id_t), id_s, true));
        else
            combo = add(combo,`item(`id(id_t), id_s));
        i=i+1;
    }

    return `VBox(
        `Left(`ComboBox(`id(ID), label, combo)),
        VSeparator()
    );
}

/**
 * Query the widget with `id(ID) for its `Value
 * @param ID security setting identifier
 */
global define void widget2settings(string ID) ``{
    any ret = UI::QueryWidget(`id(ID), `Value);
    string new = "";
    if(is(ret, boolean)) {
        if(ret == true)
            new = "yes";
        else
            new = "no";
    }
    else if(is(ret, integer))
	new = sformat("%1", ret);
    else if(is(ret, string))
	new = ret;
    else {
	y2error("Unknown widget type: %1", ret);
	new = nil;
    }

    if(new != nil && Security::Settings[ID]:"" != new) {
	y2milestone("Setting modified (%1): %2 -> %3)", ID, Security::Settings[ID]:"", new);
	Security::Settings[ID] = new;
	Security::modified = true;
    }
}

/**
 * Vertical separator
 * @return vertical separator
 */
global define term VSeparator() ``{
    return `VSpacing(`opt(`vstretch), 0.1);
}

/**
 * Horizontal separator
 * @return horizontal separator
 */
global define term HSeparator() ``{
    return `HSpacing(`opt(`hstretch), 0.1);
}

/**
 * Frame with spacings
 * @param f1 horizontal spacing
 * @param f2 vertical spacing
 * @param S frame label
 * @param T frame contents
 * @return frame with contents
 */
global define term XFrame(float f1, float f2, string S, term T) ``{
  return `Frame(S,`HBox(`HSpacing(f1),`VBox(`VSpacing(f2),T,`VSpacing(f2)),`HSpacing(f1)));
}

/**
 * Check if minimum is less than maximum in the widget
 * @param minID ID os the minimum widget
 * @param maxID ID os the maximum widget
 * @return true or false
 */
global define boolean checkMinMax(string minID, string maxID) ``{
    any min = UI::QueryWidget(`id(minID), `Value);
    any max = UI::QueryWidget(`id(maxID), `Value);
    if(is(min, integer) || is(min, float))
	if(is(max, integer) || is(max, float))
	    if(min <= max)
		return true;
    return false;
}

/**
 * If modified, ask for confirmation
 * @return true if abort is confirmed
 */
global define boolean ReallyAbort() ``{
    return !Security::Modified() || UI::ReallyAbortPopup(true);
}

/**
 * Return all keys from the map
 * @param m the map
 * @return a list of all keys from the map
 */
global define list mapkeys(map m) ``{
    if(m==$[]) return [];
    return maplist(`var, `val, m, ``(var));
}

/**
 * Return all values from the map
 * @param m the map
 * @return a list of all values from the map
 */
global define list mapvalues(map m) ``{
    if(m==$[]) return [];
    return maplist(`var, `val, m, ``(val));
}

/**
 * Return value from a map for the given key, nil if not found
 * @param m the map
 * @param k the key
 * @return the found value
 */
global define any mapvalue(map m, any k) ``{
    if(m==$[]) return nil;
    return lookup(m, k, nil);
}

/**
 * Switch map keys to lower case
 * @param m input map
 * @return map with keys converted to lower case
 */
global define map switch2lower(map m) ``{
    return mapmap(string k, string v, m, ``([tolower(k), v]));
}

/**
 * Switch map keys to upper case
 * @param m input map
 * @return map with keys converted to lower case
 */
global define map switch2upper(map m) ``{
    return mapmap(string k, string v, m, ``([toupper(k), v]));
}

/* EOF */
}
