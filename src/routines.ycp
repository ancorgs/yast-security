/**
 * File:
 *   routines.ycp
 *
 * Module:
 *   Security configuration
 *
 * Summary:
 *   Generally usable functions
 *
 * Authors:
 *   Michal Svec <msvec@suse.cz>
 *
 * $Id$
 *
 * This file contains generally usable functions.
 */

{

textdomain "security";

/**
 * Update one value ("Value") in the widget map and return the updated map
 * @param widgets the map of all widgets to be updated
 * @param ID the item identifier
 * @param val the item value
 * @return map the updated map
 * @see <a href="widgets.html">widgets.ycp</a>
 */
global define updateValue(map widgets, string ID, string val) ``{
    map item = lookup(widgets,ID,$[]);
    //if(val!="")
    item = add(item,"Value",val);
    widgets = add(widgets,ID,item);
    return widgets;
};

/**
 * Convert security settings (from io) to the widgets map.
 * @param widgets default map of widgets
 * @param settings settings to be converted
 * @return map new widgets map
 */
global define settings2widgets(map widgets, map settings) ``{
    /*
    widgets = foreach(`key, `value, settings, ``{
        widgets = updateValue(widgets,key,value);
        return widgets;
    });
    */
    foreach(`key, `value, settings, ``{
        widgets = updateValue(widgets,key,value);
    });

    return widgets;
};

/**
 * Convert the widgets map to the security settings (for io)
 * @param widgets widgets to be converted
 * @param settings default map of settings
 * @return map new settings map
 */
global define widgets2settings(map settings, map widgets) ``{
    map values = mapmap(`key,`value, widgets,``{
        return [ key, lookup(value,"Value","") ];
    });

    settings = foreach(`key,`value, values, ``{
        settings = add(settings,key,value);
        return settings;
    });

    return settings;
};

/**
 * Convert list of the form: [$["value":"3", "variable":"FAIL_DELAY"], ... ]
 * to the map: $["FAIL_DELAY":"3"]
 * @param l the list to convert
 * @return map a converted map
 * @see <a href="widgets.html">widgets.ycp</a>
 */
global define list2map(list l) ``{
    if(l==[]) return $[];
    map m = foreach(`item, l, ``{
        m = add(m, lookup(item, "variable", "unknown"), lookup(item, "value", ""));
        return m;
    });
    return m;
}

/**
 * Complement to the list2map function
 * @param m the map to convert
 * @return list a converted list
 * @see list2map
 */
global define map2list(map m) ``{
    if(m==$[]) return [];
    list l = foreach(`key, `value, m, ``{
        map mm = add($[], "value", value);
        mm = add(mm, "variable", key);
        l = add(l, mm);
        return l;
    });
    return l;
}

/**
 * Return all keys from the map
 * @param m the map
 * @return list a list of all keys from the map
 */
global define mapkeys(map m) ``{
    if(m==$[]) return [];
    return maplist(`var, `val, m, ``(var));
}

/**
 * Return all values from the map
 * @param m the map
 * @return list a list of all values from the map
 */
global define mapvalues(map m) ``{
    if(m==$[]) return [];
    return maplist(`var, `val, m, ``(val));
}

/**
 * Return value from a map for the given key, nil if not found
 * @param m the map
 * @param k the key
 * @return any the found value
 */
global define mapvalue(map m, any k) ``{
    if(m==$[]) return nil;
    return lookup(m, k, nil);
}

} /* YaST2: Local security configuration EOF */
