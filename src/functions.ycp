/**
 * File:
 *   functions.ycp
 *
 * Module:
 *   Security configuration
 *
 * Summary:
 *   Generally usable functions
 *
 * Authors:
 *   Michal Svec <msvec@suse.cz>
 *
 * $Id$
 *
 * This file contains generally usable functions.
 */

{

textdomain "security";

/**
 * Update one value ("Value") in the map and return the updated map
 * @param opts the map to be updated
 * @param ID the item identifier
 * @param val the item value
 * @return map the updated map
 * @see <a href="ui_widgets.html">ui_widgets.ycp</a>
 */

define updateValue(map opts, string ID, string val) ``{
  map item = lookup(opts,ID);
  //if(val!="") {
    item = add(item,"Value",val);
    opts = add(opts,ID,item);
  //}
  return opts;
};

/**
 * Convert security definitions (io) to the UI options map.
 * FIXME
 */

define defs2options(map opts, map defs) ``{
  map o = opts;
  o = foreach(`key, `value, defs, ``{
    o = updateValue(o,key,value);
    return o;
  });
  return o;
};

/**
 * Convert the UI options map to the security definitions (io)
 * FIXME
 */

define options2defs(map default, map opts) ``{
  map defs = default;
  y2debug("defs: %1",defs);
  map de = mapmap(`key,`value, opts,``{
    return [ key, lookup(value,"Value") ];
  });

  defs = foreach(`key,`value, de, ``{
    defs = add(defs,key,value);
    return defs;
  });

  return defs;
};

/**
 * Convert list of the form: [$["value":"3", "variable":"FAIL_DELAY"], ... ]
 * to the map: $["FAIL_DELAY":"3"]
 * @param l the list to convert
 * @return map|void a converted map
 * @see <a href="ui_widgets.html">ui_widgets.ycp</a>
 */

define list2map(list|void l) ``{
  map m = $[];
  if(l==nil)
    return m;
  m = foreach(`item, l, ``{
    m = add(m, lookup(item, "variable"), lookup(item, "value"));
    return m;
  });
  return m;
}

/**
 * Complement to the list2map function
 * @param m the map to convert
 * @return list|void a converted list
 * @see list2map
 */

define map2list(map|void m) ``{
  list l = [];
  if(m==nil)
    return l;
  l = foreach(`key, `value, m, ``{
    map mm = add($[], "value", value);
    mm = add(mm, "variable", key);
    l = add(l, mm);
    return l;
  });
  return l;
}

/**
 * Return all keys from the map
 * @param m the map
 * @return list a list of all keys from the map
 */

define mapkeys(map|void m) ``{
  if(m==nil) return [];
  return maplist(`var, `val, m, ``(var));
}

/**
 * Return value from a map for the given key
 * @param m the map
 * @param k the key
 * @return any the found value
 */

define mapvalue(map|void m, any k) ``{
  if(m==nil)
    return nil;
  return lookup(m, k);
}

} /* YaST2: Local security configuration EOF */
