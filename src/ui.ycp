/**
 * File:
 *   ui.ycp
 *
 * Module:
 *   Security configuration
 *
 * Summary:
 *   User interface functions
 *
 * Authors:
 *   Michal Svec <msvec@suse.cz>
 *
 * $Id$
 *
 * These functions are used for the user interface creation
 * and interaction.
 * <pre>
 * Usage:
 *   include "security/ui.ycp";
 *   map STRINGS = CallFunction(`your_helps());
 *   map WIDGETS = CallFunction(`your_widgets());
 * </pre>
 */

{

textdomain "security";

include "security/routines.ycp";
include "security/settings.ycp";
include "security/functions_ui.ycp";

include "ui/common_messages.ycp";

/**
 * Return a widget from the WIDGETS map created acording to the ID.
 * @return term the created widget
 * @see <a href="ui_widgets.html">ui_widgets.ycp</a>
 */
global define map2widget(string ID) ``{
    map m = lookup(WIDGETS,ID);
    string label = lookup(m,"Label");
    string value = lookup(m,"Value");
    string widget = lookup(m,"Widget");

    /* "Widget" == "CheckBox" */

    if(widget == "CheckBox") {
        boolean enabled = false;
        if(value == "yes")
            enabled = true;
        return `VBox(
            //VSeparator(),
            `Left(`CheckBox(`id(ID),label,enabled)),
            VSeparator()
        );
    }

    /* "Widget" == "TextEntry" */

    if(widget == "TextEntry") {
        return `VBox(
            `Left(`TextEntry(`id(ID),label,value)),
            //VSeparator(),
            VSeparator()
        );
    }

    /* "Widget" == "IntField" */

    if(widget == "IntField") {
        return `VBox(
            //VSeparator(),
            `Left(`IntField(`id(ID),label,0,2147483647,tointeger(value))),
            VSeparator()
        );
    }

    /* "Widget" == "???" */

    if(widget != "ComboBox") {
        y2error("Unknown widget: %1", widget);
        return VSeparator();
    }

    /* "Widget" == "ComboBox" */

    list li = lookup(m,"Options");
    list combo = [];
    integer i = 0;

    while(i < size(li)) {
        //string|list it = select(li,i);
        any it = select(li,i);
        string id_t = "";
        string id_s = "";
        if(is(it,string)) {
            id_t = it;
            id_s = it;
        }
        else {
            id_t = select(it,0);
            id_s = select(it,1);
        }
        if(value == id_t)
            combo = add(combo,`item(`id(id_t),id_s,true));
        else
            combo = add(combo,`item(`id(id_t),id_s));
        i=i+1;
    }

    return `VBox(
        `Left(`ComboBox(`id(ID),label,combo)),
        VSeparator()
    );
};

/**
 * Query the widget with `id(ID) for its `Value
 * @param ID the ID of the item
 * @return any the item's value
 */
global define widget2value(string ID) ``{
    any ret = UI::QueryWidget(`id(ID),`Value);
    if(is(ret,boolean)) {
        if(ret==true)
            ret = "yes";
        else
            ret = "no";
    }
    if(is(ret,integer))
        ret = sformat("%1",ret);

    /* FIXME */
    if(ID == "PERMISSION_SECURITY")
        if(!issubstring(ret,"local"))
            ret = ret + " local";

    return ret;
};

/**
 * Check if minimum is less than maximum in the widget
 * @param minID ID os the minimum widget
 * @param maxID ID os the maximum widget
 * @return boolean true or false
 */
global define checkMinMax(string minID, string maxID) ``{
  any min = UI::QueryWidget(`id(minID),`Value);
  any max = UI::QueryWidget(`id(maxID),`Value);
  if(is(min,integer) || is(min,float))
    if(is(max,integer) || is(max,float))
      if(min<=max)
        return true;
  return false;
}

/**
 * Process the UI input and return `ok (OK or Finish), nil (Close, Cancel)
 * or the returned value (otherwise).
 * @return any the returned value
 */
global define processInput() ``{
    any ret = nil;

    while(true) {
        ret = UI::UserInput();
        if(ret != `abort)
            break;
        // popup message
        any re = Popup(_("Do you really want to abort the security configuration?
All changes you made will be lost."));
        if(re==`ok)
            break;
    }

    if(ret == `ok || ret == `finish)
        return `ok;
    if(ret == `cancel || ret == nil)
        return nil;

    return ret;
};

/**
 * Vertical separator
 * @return term the vertical separator
 */
global define VSeparator() ``{
    return `VSpacing(`opt(`vstretch),0.1);
};

/**
 * Horizontal separator
 * @return term the horizontal separator
 */
global define HSeparator() ``{
    return `HSpacing(`opt(`hstretch),0.1);
};

/**
 * Construct a button according to the symbol.
 * If the button is OK, Finish or Next, it is defined as Replace Point `rp.
 * @param button the button symbol
 * @return term the button
 */
global define Button(symbol button) ``{
    //map BUTTONS = CallFunction(`ui_buttons());
    map BUTTONS = $[
	`ok : OKButtonLabel(),
	`back : BackButtonLabel(),
	`next : NextButtonLabel(),
	`help : HelpButtonLabel(),
	`abort : AbortButtonLabel(),
	`finish : FinishButtonLabel(),
	`cancel : CancelButtonLabel(),
	// pushbutton label
	`details : _("&Details"),
	// pushbutton label
	`expert : _("&Expert"),
	`yes : YesButtonLabel(),
	`no : NoButtonLabel()
    ];
    string text = lookup(BUTTONS,button);
    if (text == "")
        return nil;

    term ret = nil;

    if (button == `ok || button == `finish || button == `next)
        ret = `ReplacePoint(`id(`rp),`PushButton(`id(button), `opt(`default), text));
    else
        ret = `PushButton(`id(button), text);

    return ret;
}

/**
 * Create the bottom buttons. By default [Back], [Abort] and [Next].
 * @param buttons a list of buttons to be created
 * @return term the bottom buttons term (HBox)
 * @see 
 */
global define BottomButtons(list buttons) ``{
    symbol B1 = nil;
    symbol B2 = nil;
    symbol B3 = nil;

    if (buttons == [] ) buttons = [ `back, `abort, `next];

    term TT = `HBox();

    TT = foreach (`s,buttons,``{
        any x = Button(s);
        TT = add(TT,x);
        x = `HStretch();
        TT = add(TT, x);
        return TT;
    });

    return remove(TT,size(TT));
};

/**
 * Create the main dialog widget
 * @param ID identifier of the caption and helptext
 * @param buttons a list of bottom buttons
 * @param contents the contents of the dialog
 * @return any the UI return value
 * @see BottomButtons
 * @see STRINGS
 * @see SuSEDialogUP
 */
global define SuSEDialog(string ID, list buttons, term contents) ``{
  //map dmap = lookup(STRINGS(),ID);
  map dmap = lookup(STRINGS,ID);
  string help_text = lookup(dmap,"help");
  string caption = lookup(dmap,"caption");

  any ret = UI::OpenDialog( `opt(`defaultsize),
    `VBox(`Image(`suseheader, "SuSE"), `HBox(
      `HWeight(30, `ReplacePoint(`id(`rp_help),`RichText(`id(`help), help_text))),
      `HWeight(70,
        `HVCenter( `VBox(
          `Top(`Left(`ReplacePoint(`id(`rp_caption),`Heading(`id(`title), caption)))),
          VSeparator(),
          `HVCenter(`HVSquash(`HBox(`HSpacing(5),`VBox(`VSpacing(2),`ReplacePoint(`id(`rp_main),contents),`VSpacing(2)),`HSpacing(5)))),
          //`HVCenter(`Frame(caption,T)),
          VSeparator(),
          `ReplacePoint(`id(`rp_buttons),BottomButtons(buttons))
        )))
  )));

  return ret;
};

/**
 * Update the main dialog widget
 * Same as SuSEDialog, just update only variant.
 * @see SuSEDialog
 */
global define SuSEDialogUP(string ID, list buttons, term T) ``{
  //map dmap = lookup(STRINGS(),ID);
  map dmap = lookup(STRINGS,ID);
  string help_text = lookup(dmap,"help");
  string caption = lookup(dmap,"caption");

  UI::ReplaceWidget(`id(`rp_help), `RichText(`id(`help), help_text));
  UI::ReplaceWidget(`id(`rp_caption), `Heading(`id(`title), caption));
  UI::ReplaceWidget(`id(`rp_main), T);
  UI::ReplaceWidget(`id(`rp_buttons), BottomButtons(buttons));
};

/**
 * Update one value in the WIDGETS map from the widget value
 * @param ID the item ID (same in the widget and in WIDGETS)
 */
global define updateWidget(string ID) ``{
    any val = widget2value(ID);
    WIDGETS = updateValue(WIDGETS,ID,val);
};


/**
 * Create one security item in the (unused) main dialog
 * @param ID the item id
 * @param text the item text
 * @return term the created widget
 */
global define SecurityItem(any ID, string text) ``{
    term T = `VWeight( 15,
        `PushButton ( `id( ID ), `opt( `hstretch ), text )
    );
    return T;
};

/**
 * Search the whole settings list for the given string id
 * @param settings the list of settings
 * @param ident the item identifier
 * @return map the found settings or nil, if not found
 */
global define FindSettings(list settings, string ident) ``{
  map ret = nil;

  map mm = find(`item,settings,``{
    string key = lookup(item,"name");
    if (key == ident) return true;
    return false;
  });

  if(mm == nil || mm == $[])
    ret = nil;
  else
    ret = lookup(mm,"settings");

  return ret;
};

/**
 * Search the whole settings list for the current settings
 * @param settings the list of settings
 * @param current the current settings
 * @return string the name of current settings or nil, if not found
 */
global define CurrentSettings(list settings, map current) ``{
  string ret = nil;

  y2debug("current: %1",current);
  map mm = find(`item,settings,``{
    string key = lookup(item,"name");
    if(key=="Default") return false;

    map val = lookup(item,"settings");

    y2debug("key: %1",key);
    y2debug("val: %1",val);
    if(current==val) {
      y2debug("Found");
      return true;
    }
    return false;
  });

  y2debug("mm: %1",mm);
  //y2debug("mm: %1",is nil(mm));
  if(mm == $[])
    ret = nil;
  else
    ret = lookup(mm,"name");

  //return "Secure";
  //return nil;
  y2debug("ret=%1",ret);
  //y2debug("ret=%1",is nil(ret));
  return ret;
};

/**
 * Build a RadioButton group from the list of settings
 * @param settings the list of settings
 * @param defs the default values
 */
global define SecuritySettings(list settings, map defs) ``{
  string current = CurrentSettings(settings,defs);
  y2debug("current=%1",current);

  boolean enab = false;
  if(current == nil || current == "") enab=true;

  term T = `VBox();
  T = add(T,`VSpacing(0.5));

  T = foreach(`item,settings,``{
    string key = lookup(item,"name");
    if(key=="Default") return T;

    map val = lookup(item,"settings");
    y2debug("key: %1",key);

    term R = `RadioButton();
    R = add(R,`id(key));
    R = add(R,`opt(`notify));
    R = add(R,key);
    if(key == current) R = add(R,true);
    T = add(T, `Left(R));
    T = add(T, `VSpacing(0.03));
    return T;
  });

  T = add(T,`VSpacing(0.6));
  T = add(T,`Left(`RadioButton(`id(`custom),`opt(`notify),_("&Custom settings"),enab)));
    /* T = add(T,`Left(`HBox(`RadioButton(`id(`custom),_("&Custom settings"),enab),`Right(`PushButton(`id(`details),_("&Change...")))))); */
  T = add(T,`VSpacing(0.5));
  y2debug("T: %1",T);
  return T;
};

/**
 * Update the WIDGETS map according to the given settings
 * @param curr the given settings
 */
/* unused
global define updateWIDGETS(any curr) ``{
  any curr2 = UI::QueryWidget(`id(`rb),`CurrentButton);
  if(curr2!=curr)
  changed = true;
  string current_defs = UI::QueryWidget(`id(`rb),`CurrentButton);
  map current_sets = FindSettings(settings,current_defs);
  WIDGETS = settings2widgets(WIDGETS,current_sets);
}
*/

/**
 * Display a main security settings dialog. It also calls the
 * SecurityWizzard to display the wizzard sequention.
 * @param defs the security definitions
 */
global define SecurityMainDialog(map defs) ``{

  list settings = AllSecuritySettings();
  boolean RBgroup = true;

  SuSEDialog("Main",[`back,`finish], 
    `HVCenter(
    `VBox(
    `HVSquash(
    // frame caption
    `Frame( _("Current security settings:"),
      `HBox(`HSpacing(0.8),
      `RadioButtonGroup(`id(`rb), SecuritySettings(settings,defs)),
      `HSpacing(0.8))
    )),
    `VSpacing(0.6),
    // push button on main screen
    `HVCenter(`PushButton(`id(`details),_("&Details..."))),
    `VSpacing(0.6)
    )
  ));

  any curr = UI::QueryWidget(`id(`rb),`CurrentButton);
  if( curr == `custom) {
      UI::ChangeWidget(`id(`details),`Enabled,false);
      // push button
      UI::ReplaceWidget(`id(`rp),`PushButton(`id(`next),`opt(`default),NextButtonLabel()));
  }

  any ret = nil;
  any subret = nil;
  map old_WIDGETS = WIDGETS;

  while(true) {
    ret = processInput();
    y2debug("rettt: %1",ret);

    if(ret == `ok) {                        /* Save the settings */
      string current_defs = UI::QueryWidget(`id(`rb),`CurrentButton);
      map current_sets = FindSettings(settings,current_defs);
      WIDGETS = settings2widgets(WIDGETS,current_sets);
      break;
    }
    else if(ret == `abort || ret == `back || ret == `cancel || ret == nil)
      break;                                /* Don't save the settings */
    else if(ret == `details || ret ==`next)  {
      RBgroup=false;
      y2debug("Running wizzard: %1",ret); /* Run the wizzard */
      any current_defs = UI::QueryWidget(`id(`rb),`CurrentButton);
      if(current_defs!=`custom) {
        //string current_defs = UI::QueryWidget(`id(`rb),`CurrentButton);
        map current_sets = FindSettings(settings,current_defs);
        WIDGETS = settings2widgets(WIDGETS,current_sets);
      }
        //UI(`CloseDialog());
        subret = SecurityWizzard();
        //y2debug("subret=%1",subret);
        if(subret == `back) {
          RBgroup=true;
          SuSEDialogUP("Main",[`back,`finish], 
            `HVCenter(
            `VBox(
            `HVSquash(
            // frame caption
            `Frame( _("Current security settings:"),
              `HBox(`HSpacing(0.8),
              `RadioButtonGroup(`id(`rb), SecuritySettings(settings,defs)),
              `HSpacing(0.8))
            )),
            `VSpacing(0.6),
            // push button
            `HVCenter(`PushButton(`id(`details),_("&Details..."))),
            `VSpacing(0.6)
            )
          ));

          /* Update the Finish|Next button */
          any curr2 = UI::QueryWidget(`id(`rb),`CurrentButton);
          if( curr2 == `custom) {
	      UI::ChangeWidget(`id(`details),`Enabled,false);
	      UI::ReplaceWidget(`id(`rp),`PushButton(`id(`next),`opt(`default),NextButtonLabel()));
          }
          /* FIXME: update the current RB? Probably not*/

          continue;
        }
        else if(subret == `abort || subret == `cancel || subret == nil)
          ret = nil;
        else
          ret = `ok;
        break;
    }
    else if(ret == `custom) {                /* Change the [Finish] to [Next] */
      y2debug("custom radio button");
      UI::ChangeWidget(`id(`details),`Enabled,false);
      // push button
      UI::ReplaceWidget(`id(`rp),`PushButton(`id(`next),`opt(`default),NextButtonLabel()));
    }
    else {                                /* Other radio button */
      y2debug("SecurityMainDialog: Huh? %1",ret);
      UI::ChangeWidget(`id(`details),`Enabled,true);
      // push button
      UI::ReplaceWidget(`id(`rp),`PushButton(`id(`finish),`opt(`default),FinishButtonLabel()));
      if(ret == _("Level &3 (Network/Server)"))
        // popup if level 3 is choosen
        PopupOK(_("You have chosen 'Level 3'. This setup
provides a basic configuration for network servers
but not a completed 'full security' setting.

You need expert knowledge to make a
network server secure."));

    }
    y2debug("subret: %1",subret);
  }

  /* [Finish]ed */
  if(ret == `ok && old_WIDGETS!=WIDGETS) {
    y2debug("YES");
    y2debug("old_WIDGETS=%1",old_WIDGETS);
    y2debug("new_WIDGETS=%1",WIDGETS);
    if(RBgroup==true) {
      string current_defs = UI::QueryWidget(`id(`rb),`CurrentButton);
      //if(!is nil(current_defs)) {
      if(current_defs != nil && current_defs != "") {
        y2debug("current_defs: %1",current_defs);
        map current_sets = FindSettings(settings,current_defs);
        WIDGETS = settings2widgets(WIDGETS,current_sets);
      }
    }
    UI::CloseDialog();
    return `ok;
  }

  UI::CloseDialog();
  return nil;
};

/**
 * Wizzard for all security settings
 */
global define SecurityWizzard() ``{
  integer current = 0;

  any ret = nil;

  while(true) {
    y2debug("current: %1",current);
    if(current==0) ret = SecurityPasswdDialog();
    else if(current==1) ret = SecurityBootDialog();
    else if(current==2) ret = SecurityLoginDialog();
    else if(current==3) ret = SecurityAdduserDialog();
    else if(current==4) ret = SecurityMiscDialog();

    y2debug("ret: %1",ret);
    if(ret==`next) {
      current=current+1;
      if(current>4) break;
    }
    else if(ret==`back) {
      current=current-1;
      if(current<0) break;
    }
    else if(ret == `abort || ret==nil || ret==`ok) break;
  }

  y2debug("aborting: %1",ret);
  return ret;
};

/**
 * Main security settings dialog
 */
global define SecurityDetailsDialog() ``{
  SuSEDialog("Main", [`back,`finish], `VBox(
    // security item captions
    VSeparator(), SecurityItem(`passwd,_("Password settings")),
    VSeparator(), SecurityItem(`boot,  _("Boot settings")),
    VSeparator(), SecurityItem(`login, _("Login settings")),
    VSeparator(), SecurityItem(`uid,   _("User and group ID settings")),
    VSeparator(), SecurityItem(`misc,  _("Miscellaneous settings")),
    VSeparator(),`VSpacing(2)
  ));

  any ret = nil;
  any subret = nil;
  boolean changed = false;

  while(true) {
    ret = processInput();
    if(ret == `ok)
      break;
    else if(ret == `abort || ret == `back || ret == `cancel || ret == nil)
      break;
    else if(ret == `boot)  subret = SecurityBootDialog();
    else if(ret == `login) subret = SecurityLoginDialog();
    else if(ret == `passwd) subret = SecurityPasswdDialog();
    else if(ret == `misc) subret = SecurityMiscDialog();
    else if(ret == `uid) subret = SecurityAdduserDialog();
    else y2debug("SecurityDetailsDialog: Huh? %1",ret);
    if(subret == `ok) changed = true;
  }

  UI::CloseDialog();

  /* return `ok only if something changed */
  if(ret == `ok && changed == true)
    return `ok;

  return nil;
};

/**
 * Frame with spacings
 */
global define XFrame(float f1, float f2, string S, term T) ``{
  return `Frame(S,`HBox(`HSpacing(f1),`VBox(`VSpacing(f2),T,`VSpacing(f2)),`HSpacing(f1)));
};

/**
 * Boot settings dialog
 */
global define SecurityBootDialog() ``{
  SuSEDialogUP("Boot", [], `VBox(
  // SecurityBootDialog caption
XFrame(0.8,0.5,_("Boot permissions"),`HBox(`HSpacing(1),`VBox(//`VSpacing(-0.1),
    VSeparator(),
    map2widget("CONSOLE_SHUTDOWN"),
    `VSpacing(0.4),
    map2widget("KDM_SHUTDOWN")//,
    //VSeparator()
//,`VSpacing(0.3)
),`HSpacing(1.5)))
//,`VSpacing(2.5)
  ));
  any ret = processInput();
  if(ret == `ok || ret ==`next) {
    updateWidget("CONSOLE_SHUTDOWN");
    updateWidget("KDM_SHUTDOWN");
  }
  //UI(`CloseDialog());
  return ret;
};

/**
 * Login settings dialog
 */
global define SecurityLoginDialog() ``{
  SuSEDialogUP("Login", [], `VBox(
//`HVCenter(`HVSquash(`HBox(`HSpacing(5),`VBox(`VSpacing(2),T,`VSpacing(2)),`HSpacing(5)))),
  // SecurityLoginDialog caption
XFrame(2.0,0.9,_("Login"),`VBox(
    //VSeparator(),
    map2widget("FAIL_DELAY"),
    //VSeparator(),
    `VSpacing(0.5),
    map2widget("FAILLOG_ENAB"),
    VSeparator(),
    map2widget("LASTLOG_ENAB")
    //VSeparator()
))
//,`VSpacing(1.7)
));
  any ret = processInput();
  if(ret == `ok || ret ==`next) {
    updateWidget("FAILLOG_ENAB");
    updateWidget("LASTLOG_ENAB");
    updateWidget("FAIL_DELAY");
  }
  //UI(`CloseDialog());
  return ret;
};

/**
 * Files permissions dialog
 */
global define SecurityPermsDialog() ``{
  SuSEDialogUP("Perms", [], `VBox(
    VSeparator(),
    map2widget("PERMISSION_SECURITY"),
    VSeparator()
  ));
  any ret = processInput();
  if(ret == `ok || ret ==`next) {
    updateWidget("PERMISSION_SECURITY");
  }
  //UI(`CloseDialog());
  return ret;
};

/**
 * Other security settings dialog
 */
global define SecurityMiscDialog() ``{
  SuSEDialogUP("Misc", [`back,`abort,`finish], `VBox(
    VSeparator(),
//`Frame("Permissions",`HBox(`HSpacing(1),`VBox(`VSpacing(0.3),
    map2widget("PERMISSION_SECURITY"), /* See the SecurityPermsDialog */
//`VSpacing(0.3)),`HSpacing(1))),
//`VSpacing(1.5),
//`Frame("Other settings",`HBox(`HSpacing(1),`VBox(`VSpacing(0.3),
    VSeparator(),
    map2widget("RUN_UPDATEDB_AS"),
    `VSpacing(1.0),
    map2widget("CWD_IN_ROOT_PATH"),
    VSeparator(),
    map2widget("ROOT_LOGIN_REMOTE"),
    //VSeparator()
//),`HSpacing(1)))
    `VSpacing(1.8)
  ));
  any ret = processInput();
  if(ret == `ok || ret ==`next) {
    updateWidget("ROOT_LOGIN_REMOTE");
    updateWidget("PERMISSION_SECURITY");
    updateWidget("CWD_IN_ROOT_PATH");
    updateWidget("RUN_UPDATEDB_AS");
  }
  //UI(`CloseDialog());
  return ret;
};

/**
 * Password security settings dialog
 */
global define SecurityPasswdDialog() ``{
  SuSEDialogUP("Password", [], `VBox(
    //VSeparator(),
    //`VSpacing(-0.2),
    // SecurityPasswdDialog caption
    XFrame(0.3,0.15,_("Checks"),`VBox(
    map2widget("PASSWD_USE_CRACKLIB"),
    VSeparator(),
    map2widget("OBSCURE_CHECKS_ENAB"),
    VSeparator(),
    map2widget("MD5_SUPPORT"),
    VSeparator()
    )),
    `VSpacing(0.15),
    // SecurityPasswdDialog
    `Frame(_("Password length"),`HBox(
    `HSpacing(0.4),
    map2widget("PASS_MIN_LEN"),
    `HSpacing(0.4),
    map2widget("PASS_MAX_LEN"),
    `HSpacing(0.4)
    )),
    `VSpacing(0.1),
    // SecurityPasswdDialog
    `Frame(_("Days of password change warning"),`HBox(
    `HSpacing(0.4),
    map2widget("PASS_MIN_DAYS"),
    `HSpacing(0.4),
    map2widget("PASS_MAX_DAYS"),
    `HSpacing(0.4)
    )),
    `VSpacing(0.15),
    map2widget("PASS_WARN_AGE"),
    `VSpacing(0.0)
  ));
  any ret = nil;
  while(true) {
    ret = processInput();
    if(ret == `ok || ret ==`next) {
      if(checkMinMax("PASS_MIN_LEN","PASS_MAX_LEN")!=true) {
        // bad password data
        PopupOK(_("The minimum password length cannot be larger than maximum"));
        continue;
      }
      if(checkMinMax("PASS_MIN_DAYS","PASS_MAX_DAYS")!=true) {
        // bad password data
        PopupOK(_("The minimum number of days cannot be larger than maximum"));
        continue;
      }
    }
    break;
  }
  if(ret == `ok || ret ==`next) {
    updateWidget("PASS_MIN_DAYS");
    updateWidget("PASS_MAX_DAYS");
    updateWidget("PASS_MIN_LEN");
    updateWidget("PASS_MAX_LEN");
    updateWidget("PASSWD_USE_CRACKLIB");
    updateWidget("OBSCURE_CHECKS_ENAB");
    updateWidget("PASS_WARN_AGE");
    updateWidget("MD5_SUPPORT");
  }
  //UI(`CloseDialog());
  return ret;
};

/**
 * Adduser security settings dialog
 */
global define SecurityAdduserDialog() ``{
  SuSEDialogUP("Adduser", [], `VBox(
    VSeparator(),
    // SecurityAdduserDialog caption
    XFrame(1.8,0.5,_("User ID limitations"),`HBox(
    map2widget("UID_MIN"),
    `HSpacing(1.5),
    map2widget("UID_MAX")
    )),
    `VSpacing(0.7),
    // SecurityAdduserDialog caption
    XFrame(1.8,0.5,_("Group ID limitations"),`HBox(
    map2widget("GID_MIN"),
    `HSpacing(1.5),
    map2widget("GID_MAX")
    )),
    `VSpacing(1.7)
    //VSeparator()
    //,`HSpacing(1)
  ));
  any ret = nil;
  while(true) {
    ret = processInput();
    if(ret == `ok || ret ==`next) {
      if(checkMinMax("UID_MIN","UID_MAX")!=true) {
        // SecurityAdduserDialog error
        PopupOK(_("The minimum user ID cannot be larger than maximum"));
        continue;
      }
      if(checkMinMax("GID_MIN","GID_MAX")!=true) {
        // SecurityAdduserDialog error
        PopupOK(_("The minimum group IDs cannot be larger than maximum"));
        continue;
      }
    }
    break;
  }
  if(ret == `ok || ret ==`next) {
    updateWidget("GID_MIN");
    updateWidget("GID_MAX");
    updateWidget("UID_MIN");
    updateWidget("UID_MAX");
  }
  //UI(`CloseDialog());
  return ret;
};

} /* YaST2: Local security configuration EOF */

