/**
 * File:	ui.ycp
 * Module:	Security configuration
 * Summary:	User interface functions
 * Authors:	Michal Svec <msvec@suse.cz>
 *
 * $Id$
 *
 * These functions are used for the user interface creation
 * and interaction.
 * <pre>
 * Usage:
 *   include "security/ui.ycp";
 *   map WIDGETS = CallFunction(`your_widgets());
 * </pre>
 */

{

textdomain "security";

include "security/routines.ycp";
include "security/settings.ycp";
include "security/functions_ui.ycp";
include "security/helps.ycp";
include "security/users.ycp";

include "ui/common_messages.ycp";

global define ReallyAbort() ``{
    return UI::ReallyAbortPopup(true);
}

/**
 * Return a widget from the WIDGETS map created acording to the ID.
 * @return term the created widget
 * @see <a href="widgets.html">widgets.ycp</a>
 */
global define map2widget(string ID) ``{
    map m = lookup(WIDGETS,ID,$[]);
    string label = lookup(m,"Label","");
    string value = lookup(m,"Value","");
    string widget = lookup(m,"Widget","");

    /* "Widget" == "CheckBox" */

    if(widget == "CheckBox") {
        boolean enabled = false;
        if(value == "yes")
            enabled = true;
        return `VBox(
            //VSeparator(),
            `Left(`CheckBox(`id(ID),label,enabled)),
            VSeparator()
        );
    }

    /* "Widget" == "TextEntry" */

    if(widget == "TextEntry") {
        return `VBox(
            `Left(`TextEntry(`id(ID),label,value)),
            //VSeparator(),
            VSeparator()
        );
    }

    /* "Widget" == "IntField" */

    if(widget == "IntField") {
        return `VBox(
            //VSeparator(),
            `Left(`IntField(`id(ID),label,0,2147483647,tointeger(value))),
            VSeparator()
        );
    }

    /* "Widget" == "???" */

    if(widget != "ComboBox") {
        y2error("Unknown widget: %1", widget);
        return VSeparator();
    }

    /* "Widget" == "ComboBox" */

    list li = lookup(m,"Options",[]);
    list combo = [];
    integer i = 0;

    while(i < size(li)) {
        //string|list it = select(li,i);
        any it = select(li,i,"");
        string id_t = "";
        string id_s = "";
        if(is(it,string)) {
            id_t = it;
            id_s = it;
        }
        else {
            id_t = select(it,0,"");
            id_s = select(it,1,"");
        }
        if(value == id_t)
            combo = add(combo,`item(`id(id_t),id_s,true));
        else
            combo = add(combo,`item(`id(id_t),id_s));
        i=i+1;
    }

    return `VBox(
        `Left(`ComboBox(`id(ID),label,combo)),
        VSeparator()
    );
};

/**
 * Query the widget with `id(ID) for its `Value
 * @param ID the ID of the item
 * @return any the item's value
 */
global define widget2value(string ID) ``{
    any ret = UI::QueryWidget(`id(ID),`Value);
    if(is(ret,boolean)) {
        if(ret==true)
            ret = "yes";
        else
            ret = "no";
    }
    if(is(ret,integer))
        ret = sformat("%1",ret);

    return ret;
};

/**
 * Check if minimum is less than maximum in the widget
 * @param minID ID os the minimum widget
 * @param maxID ID os the maximum widget
 * @return boolean true or false
 */
global define checkMinMax(string minID, string maxID) ``{
  any min = UI::QueryWidget(`id(minID),`Value);
  any max = UI::QueryWidget(`id(maxID),`Value);
  if(is(min,integer) || is(min,float))
    if(is(max,integer) || is(max,float))
      if(min<=max)
        return true;
  return false;
}

/**
 * Process the UI input and return `ok (OK or Finish), nil (Close, Cancel)
 * or the returned value (otherwise).
 * @return any the returned value
 */
global define processInput() ``{
    any ret = nil;

    while(true) {
        ret = UI::UserInput();
        if(ret != `abort)
            break;
        // popup message
        any re = Popup(_("Do you really want to abort the security configuration?
All changes you made will be lost."));
        if(re==`ok)
            break;
    }

    if(ret == `ok || ret == `finish)
        return `ok;
    if(ret == `cancel || ret == nil)
        return nil;

    return ret;
};

/**
 * Vertical separator
 * @return term the vertical separator
 */
global define VSeparator() ``{
    return `VSpacing(`opt(`vstretch),0.1);
};

/**
 * Horizontal separator
 * @return term the horizontal separator
 */
global define HSeparator() ``{
    return `HSpacing(`opt(`hstretch),0.1);
};

/**
 * Update one value in the WIDGETS map from the widget value
 * @param ID the item ID (same in the widget and in WIDGETS)
 */
global define updateWidget(string ID) ``{
    any val = widget2value(ID);
    WIDGETS = updateValue(WIDGETS,ID,val);
};


/**
 * Create one security item in the (unused) main dialog
 * @param ID the item id
 * @param text the item text
 * @return term the created widget
 */
global define SecurityItem(any ID, string text) ``{
    term T = `VWeight( 15,
        `PushButton ( `id( ID ), `opt( `hstretch ), text )
    );
    return T;
};

/**
 * Search the whole settings list for the given string id
 * @param settings the list of settings
 * @param ident the item identifier
 * @return map the found settings or nil, if not found
 */
global define FindSettings(list settings, string ident) ``{
  map ret = nil;

  map mm = find(`item,settings,``{
    string key = lookup(item,"name","");
    if (key == ident) return true;
    return false;
  });

  if(mm == nil || mm == $[])
    ret = nil;
  else
    ret = lookup(mm,"settings",nil);

  return ret;
};

/**
 * Search the whole settings list for the current settings
 * @param settings the list of settings
 * @param current the current settings
 * @return string the name of current settings or nil, if not found
 */
global define CurrentSettings(list settings, map current) ``{
  string ret = nil;

  y2debug("current: %1",current);
  map mm = find(`item,settings,``{
    string key = lookup(item,"name","");
    if(key=="Default") return false;

    map val = lookup(item,"settings",$[]);

    y2debug("key: %1",key);
    y2debug("val: %1",val);
    if(current==val) {
      y2debug("Found");
      return true;
    }
    return false;
  });

  y2debug("mm: %1",mm);
  //y2debug("mm: %1",is nil(mm));
  if(mm == $[])
    ret = nil;
  else
    ret = lookup(mm,"name",nil);

  //return "Secure";
  //return nil;
  y2debug("ret=%1",ret);
  //y2debug("ret=%1",is nil(ret));
  return ret;
};

/**
 * Build a RadioButton group from the list of settings
 * @param settings the list of settings
 * @param defs the default values
 */
global define SecuritySettings(list settings, map defs) ``{
  string current = CurrentSettings(settings,defs);
  y2debug("current=%1",current);

  boolean enab = false;
  if(current == nil || current == "") enab=true;

  term T = `VBox();
  T = add(T,`VSpacing(0.5));

  T = foreach(`item,settings,``{
    string key = lookup(item,"name","");
    if(key=="Default") return T;

    map val = lookup(item,"settings",$[]);
    y2debug("key: %1",key);

    term R = `RadioButton();
    R = add(R,`id(key));
    R = add(R,`opt(`notify));
    R = add(R,key);
    if(key == current) R = add(R,true);
    T = add(T, `Left(R));
    T = add(T, `VSpacing(0.03));
    return T;
  });

  T = add(T,`VSpacing(0.6));
  T = add(T,`Left(`RadioButton(`id(`custom),`opt(`notify),_("&Custom settings"),enab)));
    /* T = add(T,`Left(`HBox(`RadioButton(`id(`custom),_("&Custom settings"),enab),`Right(`PushButton(`id(`details),_("&Change...")))))); */
  T = add(T,`VSpacing(0.5));
  y2debug("T: %1",T);
  return T;
};

/**
 * Update the WIDGETS map according to the given settings
 * @param curr the given settings
 */
/* unused
global define updateWIDGETS(any curr) ``{
  any curr2 = UI::QueryWidget(`id(`rb),`CurrentButton);
  if(curr2!=curr)
  changed = true;
  string current_defs = UI::QueryWidget(`id(`rb),`CurrentButton);
  map current_sets = FindSettings(settings,current_defs);
  WIDGETS = settings2widgets(WIDGETS,current_sets);
}
*/

/**
 * Display a main security settings dialog. It also calls the
 * SecurityWizzard to display the wizzard sequention.
 * @param defs the security definitions
 */
global define SecurityMainDialog(map defs) ``{

  list settings = AllSecuritySettings();
  boolean RBgroup = true;

    /* Main dialog caption */
    string caption = _("Local security configuration");
    string help = HELPS["main"]:"";

    /* Main dialog contents */
    term contents = `HVCenter(
	`VBox(
	`HVSquash(
	// frame caption
	`Frame( _("Current security settings:"),
	  `HBox(`HSpacing(0.8),
	  `RadioButtonGroup(`id(`rb), SecuritySettings(settings,defs)),
	  `HSpacing(0.8))
	)),
	`VSpacing(0.6),
	// push button on main screen
	`HVCenter(`PushButton(`id(`details),_("&Details..."))),
	`VSpacing(0.6)
	)
    );

    contents = `HVCenter(`HVSquash(`HBox(`HSpacing(5),`VBox(`VSpacing(2),`ReplacePoint(`id(`rp_main),contents),`VSpacing(2)),`HSpacing(5))));
    Wizard::SetContentsButtons(caption, contents, help,
            BackButtonLabel(), FinishButtonLabel());

  any curr = UI::QueryWidget(`id(`rb),`CurrentButton);
  if( curr == `custom) {
      UI::ChangeWidget(`id(`details),`Enabled,false);
      Wizard::ReplaceNextButton(`PushButton(`id(`next), NextButtonLabel()));
  }

  any ret = nil;
  any subret = nil;
  map old_WIDGETS = WIDGETS;

  while(true) {
    ret = processInput();
    y2debug("rettt: %1",ret);

    if(ret == `ok) {                        /* Save the settings */
      string current_defs = UI::QueryWidget(`id(`rb),`CurrentButton);
      map current_sets = FindSettings(settings,current_defs);
      WIDGETS = settings2widgets(WIDGETS,current_sets);
      break;
    }
    else if(ret == `abort || ret == `back || ret == `cancel || ret == nil)
      break;                                /* Don't save the settings */
    else if(ret == `details || ret ==`next)  {
      RBgroup=false;
      y2debug("Running wizzard: %1",ret); /* Run the wizzard */
      any current_defs = UI::QueryWidget(`id(`rb),`CurrentButton);
      if(current_defs!=`custom) {
        //string current_defs = UI::QueryWidget(`id(`rb),`CurrentButton);
        map current_sets = FindSettings(settings,current_defs);
        WIDGETS = settings2widgets(WIDGETS,current_sets);
      }
        //UI(`CloseDialog());
        subret = SecurityWizzard();
        //y2debug("subret=%1",subret);
        if(subret == `back) {
          RBgroup=true;

    /* Main dialog contents */
    term contents = `HVCenter(
	`VBox(
	`HVSquash(
	// frame caption
	`Frame( _("Current security settings:"),
	  `HBox(`HSpacing(0.8),
	  `RadioButtonGroup(`id(`rb), SecuritySettings(settings,defs)),
	  `HSpacing(0.8))
	)),
	`VSpacing(0.6),
	// push button on main screen
	`HVCenter(`PushButton(`id(`details),_("&Details..."))),
	`VSpacing(0.6)
	)
    );

    contents = `HVCenter(`HVSquash(`HBox(`HSpacing(5),`VBox(`VSpacing(2),`ReplacePoint(`id(`rp_main),contents),`VSpacing(2)),`HSpacing(5))));
    Wizard::SetContentsButtons(caption, contents, help,
            BackButtonLabel(), FinishButtonLabel());

          /* Update the Finish|Next button */
          any curr2 = UI::QueryWidget(`id(`rb),`CurrentButton);
          if( curr2 == `custom) {
	      UI::ChangeWidget(`id(`details),`Enabled,false);
	      Wizard::ReplaceNextButton(`PushButton(`id(`next), NextButtonLabel()));
          }
          /* FIXME: update the current RB? Probably not*/

          continue;
        }
        else if(subret == `abort || subret == `cancel || subret == nil)
          ret = nil;
        else
          ret = `ok;
        break;
    }
    else if(ret == `custom) {                /* Change the [Finish] to [Next] */
      y2debug("custom radio button");
      UI::ChangeWidget(`id(`details),`Enabled,false);
      Wizard::ReplaceNextButton(`PushButton(`id(`next), NextButtonLabel()));
    }
    else {                                /* Other radio button */
      y2debug("SecurityMainDialog: Huh? %1",ret);
      UI::ChangeWidget(`id(`details),`Enabled,true);
      // push button
      Wizard::ReplaceNextButton(`PushButton(`id(`finish), FinishButtonLabel()));
      if(ret == _("Level &3 (Network/Server)"))
        // popup if level 3 is choosen
        PopupOK(_("You have chosen 'Level 3'. This setup
provides a basic configuration for network servers
but not a completed 'full security' setting.

You need expert knowledge to make a
network server secure."));

    }
    y2debug("subret: %1",subret);
  }

  /* [Finish]ed */
  if(ret == `ok && old_WIDGETS!=WIDGETS) {
    y2debug("YES");
    y2debug("old_WIDGETS=%1",old_WIDGETS);
    y2debug("new_WIDGETS=%1",WIDGETS);
    if(RBgroup==true) {
      string current_defs = UI::QueryWidget(`id(`rb),`CurrentButton);
      //if(!is nil(current_defs)) {
      if(current_defs != nil && current_defs != "") {
        y2debug("current_defs: %1",current_defs);
        map current_sets = FindSettings(settings,current_defs);
        WIDGETS = settings2widgets(WIDGETS,current_sets);
      }
    }
    UI::CloseDialog();
    return `ok;
  }

  UI::CloseDialog();
  return nil;
};

/**
 * Wizzard for all security settings
 */
global define SecurityWizzard() ``{
  integer current = 0;

  any ret = nil;

  while(true) {
    y2debug("current: %1",current);
    if(current==0) ret = SecurityPasswdDialog();
    else if(current==1) ret = SecurityBootDialog();
    else if(current==2) ret = SecurityLoginDialog();
    else if(current==3) ret = AdduserDialog(); //SecurityAdduserDialog();
    else if(current==4) ret = SecurityMiscDialog();

    y2debug("ret: %1",ret);
    if(ret==`next) {
      current=current+1;
      if(current>4) break;
    }
    else if(ret==`back) {
      current=current-1;
      if(current<0) break;
    }
    else if(ret == `abort || ret==nil || ret==`ok) break;
  }

  y2debug("aborting: %1",ret);
  return ret;
};

/**
 * Frame with spacings
 */
global define XFrame(float f1, float f2, string S, term T) ``{
  return `Frame(S,`HBox(`HSpacing(f1),`VBox(`VSpacing(f2),T,`VSpacing(f2)),`HSpacing(f1)));
};

/**
 * Boot settings dialog
 */
global define SecurityBootDialog() ``{

    /* Boot dialog caption */
    string caption = _("Boot settings");
    string help = HELPS["boot"]:"";

    /* Boot dialog contents */
    term contents = `VBox(
	/* Frame label */
	XFrame(0.8,0.5,_("Boot permissions"),`HBox(`HSpacing(1),`VBox(
	    VSeparator(),
	    map2widget("CONSOLE_SHUTDOWN"),
	    `VSpacing(0.4),
	    map2widget("KDM_SHUTDOWN")
	),`HSpacing(1.5)))
    );

    contents = `HVCenter(`HVSquash(`HBox(`HSpacing(5),`VBox(`VSpacing(2),`ReplacePoint(`id(`rp_main),contents),`VSpacing(2)),`HSpacing(5))));
    Wizard::SetContentsButtons(caption, contents, help,
            BackButtonLabel(), NextButtonLabel());

    any ret = processInput();
    if(ret == `ok || ret ==`next) {
	updateWidget("CONSOLE_SHUTDOWN");
	updateWidget("KDM_SHUTDOWN");
    }

    return ret;
};

/**
 * Login settings dialog
 */
global define SecurityLoginDialog() ``{

    /* Login dialog caption */
    string caption = _("Login settings");
    string help = HELPS["login"]:"";

    /* Login dialog contents */
    term contents = `VBox(
	XFrame(2.0,0.9,_("Login"),`VBox(
	    //VSeparator(),
	    map2widget("FAIL_DELAY"),
	    //VSeparator(),
	    `VSpacing(0.5),
	    map2widget("FAILLOG_ENAB"),
	    VSeparator(),
	    map2widget("LASTLOG_ENAB"),
	    VSeparator(),
	    map2widget("DISPLAYMANAGER_REMOTE_ACCESS")
	    //VSeparator()
	))
	//,`VSpacing(1.7)
    );

    contents = `HVCenter(`HVSquash(`HBox(`HSpacing(5),`VBox(`VSpacing(2),`ReplacePoint(`id(`rp_main),contents),`VSpacing(2)),`HSpacing(5))));
    Wizard::SetContentsButtons(caption, contents, help,
            BackButtonLabel(), NextButtonLabel());

    any ret = processInput();
    if(ret == `ok || ret ==`next) {
	updateWidget("FAILLOG_ENAB");
	updateWidget("LASTLOG_ENAB");
	updateWidget("FAIL_DELAY");
    }

    return ret;
};

/**
 * Other security settings dialog
 */
global define SecurityMiscDialog() ``{

    /* Misc dialog caption */
    string caption = _("Miscellaneous settings");
    string help = HELPS["misc"]:"";

    /* Misc dialog contents */
    term contents = `VBox(
	VSeparator(),
	map2widget("PERMISSION_SECURITY"),
	VSeparator(),
	map2widget("RUN_UPDATEDB_AS"),
	`VSpacing(1.0),
	map2widget("CWD_IN_ROOT_PATH"),
	`VSpacing(1.8)
    );

    contents = `HVCenter(`HVSquash(`HBox(`HSpacing(5),`VBox(`VSpacing(2),`ReplacePoint(`id(`rp_main),contents),`VSpacing(2)),`HSpacing(5))));
    Wizard::SetContentsButtons(caption, contents, help,
            BackButtonLabel(), FinishButtonLabel());

    any ret = processInput();
    if(ret == `ok || ret ==`next) {
	updateWidget("PERMISSION_SECURITY");
	updateWidget("CWD_IN_ROOT_PATH");
	updateWidget("RUN_UPDATEDB_AS");
    }

    return ret;
};

/**
 * Password security settings dialog
 */
global define SecurityPasswdDialog() ``{

    /* Password dialog caption */
    string caption = _("Password settings");
    string help = HELPS["password"]:"";

    /* Password dialog contents */
    term contents = `VBox(
	XFrame(0.3,0.15,_("Checks"),`VBox(
	    map2widget("PASSWD_USE_CRACKLIB"),
	    VSeparator(),
	    map2widget("OBSCURE_CHECKS_ENAB"),
	    VSeparator()
	)),
	`VSpacing(0.15),
	map2widget("ENCRYPTION"),
	`VSpacing(0.15),
	`Frame(_("Password length"),`HBox(
	    `HSpacing(0.4),
	    map2widget("PASS_MIN_LEN"),
	    `HSpacing(0.4),
	    map2widget("PASS_MAX_LEN"),
	    `HSpacing(0.4)
	)),
	`VSpacing(0.1),
	`Frame(_("Days of password change warning"),`HBox(
	    `HSpacing(0.4),
	    map2widget("PASS_MIN_DAYS"),
	    `HSpacing(0.4),
	    map2widget("PASS_MAX_DAYS"),
	    `HSpacing(0.4)
	)),
	`VSpacing(0.15),
	map2widget("PASS_WARN_AGE"),
	`VSpacing(0.0)
    );

    contents = `HVCenter(`HVSquash(`HBox(`HSpacing(5),`VBox(`VSpacing(2),`ReplacePoint(`id(`rp_main),contents),`VSpacing(2)),`HSpacing(5))));
    Wizard::SetContentsButtons(caption, contents, help,
            BackButtonLabel(), NextButtonLabel());

  any ret = nil;
  while(true) {
    ret = processInput();
    if(ret == `ok || ret ==`next) {
      if(checkMinMax("PASS_MIN_LEN","PASS_MAX_LEN")!=true) {
        // bad password data
        PopupOK(_("The minimum password length cannot be larger than maximum"));
        continue;
      }
      if(checkMinMax("PASS_MIN_DAYS","PASS_MAX_DAYS")!=true) {
        // bad password data
        PopupOK(_("The minimum number of days cannot be larger than maximum"));
        continue;
      }
    }
    break;
  }
  if(ret == `ok || ret ==`next) {
    updateWidget("PASS_MIN_DAYS");
    updateWidget("PASS_MAX_DAYS");
    updateWidget("PASS_MIN_LEN");
    updateWidget("PASS_MAX_LEN");
    updateWidget("PASSWD_USE_CRACKLIB");
    updateWidget("OBSCURE_CHECKS_ENAB");
    updateWidget("PASS_WARN_AGE");
    updateWidget("ENCRYPTION");
  }
  //UI(`CloseDialog());
  return ret;
};

/**
 * Adduser security settings dialog
 */
global define SecurityAdduserDialog() ``{

    /* Adduser dialog caption */
    string caption = _("Adding user settings");
    string help = HELPS["adduser"]:"";

    /* Adduser dialog contents */
    term contents = `VBox(
	VSeparator(),
	/* Frame label */
	XFrame(1.8,0.5,_("User ID limitations"),`HBox(
	map2widget("UID_MIN"),
	`HSpacing(1.5),
	map2widget("UID_MAX")
	)),
	`VSpacing(0.7),
	/* Frame label */
	XFrame(1.8,0.5,_("Group ID limitations"),`HBox(
	map2widget("GID_MIN"),
	`HSpacing(1.5),
	map2widget("GID_MAX")
	)),
	`VSpacing(1.7)
    );

    contents = `HVCenter(`HVSquash(`HBox(`HSpacing(5),`VBox(`VSpacing(2),`ReplacePoint(`id(`rp_main),contents),`VSpacing(2)),`HSpacing(5))));
    Wizard::SetContentsButtons(caption, contents, help,
            BackButtonLabel(), NextButtonLabel());

  any ret = nil;
  while(true) {
    ret = processInput();
    if(ret == `ok || ret ==`next) {
      if(checkMinMax("UID_MIN","UID_MAX")!=true) {
        // SecurityAdduserDialog error
        PopupOK(_("The minimum user ID cannot be larger than maximum"));
        continue;
      }
      if(checkMinMax("GID_MIN","GID_MAX")!=true) {
        // SecurityAdduserDialog error
        PopupOK(_("The minimum group IDs cannot be larger than maximum"));
        continue;
      }
    }
    break;
  }
  if(ret == `ok || ret ==`next) {
    updateWidget("GID_MIN");
    updateWidget("GID_MAX");
    updateWidget("UID_MIN");
    updateWidget("UID_MAX");
  }
  //UI(`CloseDialog());
  return ret;
};

/* EOF */
}
