/*
 * YaST2: Local security configuration
 *
 * Description:
 *   Input and output functions.
 *
 * Authors:
 *   Michal Svec <msvec@suse.cz>
 *
 * $Id$
 */

{

textdomain "security";
include "general.ycp";

/* Lookup default settings */

define LookupDefault(string|void item) ``{
  list settings = CallFunction(`security_settings());
  map default = find(`s,settings,``(lookup(s,"name")=="Default"));
  string def = lookup(default,"settings");
  map ret = find(`s,settings,``(lookup(s,"name")==def));
  map ret = lookup(ret,"settings");
  if(item != nil && item!="")
    return lookup(ret,item);
  return ret;
};

/* Write /etc/login.defs and rc.config */

define SecurityFinish() ``{
  list ret = [];
  add(ret,SCR(`Write(.etc.login_defs,nil)));
  add(ret,SCR(`Write(.rc.system,nil)));
  add(ret,SCR(`Execute(.target.bash, "/sbin/SuSEconfig -quick --nonewpackage")));
  return ret;
};

/* Read one SCR item and return default if the item is not present */

define ReadLoginDefs(string item) ``{
  string pth = ".etc.login_defs." + item;
  string|void ret = SCR(`Read(topath(pth)));
  if(ret == nil||ret == "")
    ret = LookupDefault(item);
  return ret;
};

define ReadRcConfig(string item) ``{
  string pth = ".rc.system." + item;
  string|void ret = SCR(`Read(topath(pth)));
  if(ret == nil)
    ret = LookupDefault(item);
  return ret;
};

/* Write one SCR item */

define WriteLoginDefs(map m, string item) ``{
  string pth = ".etc.login_defs." + item;
  string|void ret = lookup(m,item);
  if(ret == nil)
    return nil;
  return SCR(`Write(topath(pth),ret));
};

define WriteRcConfig(map m, string item) ``{
  string pth = ".rc.system." + item;
  string|void ret = lookup(m,item);
  if(ret == nil)
    return nil;
  return SCR(`Write(topath(pth),ret));
};

//list RcConfig_settings = [
define RcConfig_settings() ``{
return [
  "CONSOLE_SHUTDOWN",
  "KDM_SHUTDOWN",
  "PERMISSION_SECURITY",
  "CWD_IN_ROOT_PATH",
  "RUN_UPDATEDB_AS",
  "ROOT_LOGIN_REMOTE",
  "PASSWD_USE_CRACKLIB"
];
};

//list LoginDefs_settings = [
define LoginDefs_settings() ``{
return [
  "FAILLOG_ENAB",
  "LASTLOG_ENAB",
  "FAIL_DELAY",
  "PASS_WARN_AGE",
  "OBSCURE_CHECKS_ENAB",
  "GID_MIN",
  "GID_MAX",
  "UID_MIN",
  "UID_MAX",
  "PASS_MIN_DAYS",
  "PASS_MAX_DAYS",
  "PASS_MIN_LEN",
  "PASS_MAX_LEN"
];
};

define ApplyRead(term t, list l, map m) ``{
  m = foreach(`i, l, ``{
    term tt = add(t,i);
    m = add(m,i,eval(tt));
    return m;
  });
  return m;
};

define ApplyWrite(term t, list l, map m) ``{
  list ret = [];
  ret = foreach(`i, l, ``{
    term tt = add(add(t,m),i);
    ret = add(ret,eval(tt));
    return ret;
  });
  return ret;
};

define SecurityRead() ``{
  map m = $[];
  m = ApplyRead(``(ReadLoginDefs()),LoginDefs_settings(),m);
  m = ApplyRead(``(ReadRcConfig()),RcConfig_settings(),m);
  return m;
};

define SecurityWrite(map m) ``{
  list l1 = ApplyWrite(``(WriteLoginDefs()),LoginDefs_settings(),m);
  list l2 = ApplyWrite(``(WriteRcConfig()),RcConfig_settings(),m);
  return flatten([l1,l2]);
};

/*
 * main()
 * Only for automatic instalation
 * Args(0) = map $[ "FAILLOG_ENAB" : "7", ... ];
 *
 * Moved to security_write.ycp

list args = Args();
if(size(args) > 0) {
  y2debug("Security: only writing ... (%1)", Args(0));
  list ret = SecurityWrite(Args(0));
  SecurityFinish();
  return ret;
}

 */

return true;

} /* YaST2: Local security configuration EOF */
