/**
 * File:	clients/security_auto.ycp
 * Package:	Security configuration
 * Summary:	Client for autoinstallation
 * Authors:	Michal Svec <msvec@suse.cz>
 *
 * $Id$
 *
 * This is a client for autoinstallation. It takes its arguments,
 * goes through the configuration and return the setting.
 * Does not do any changes to the configuration.
 */

/**
 * @param first a map of security settings
 * @return boolean success of operation
 * @example map mm = $[ "FAIL_DELAY" : "77" ];
 * @example map ret = CallModule("security_auto", [ mm ]);
 */

{

textdomain "security";

y2milestone("----------------------------------------");
y2milestone("Security auto started");

include "security/io.ycp";
include "security/ui.ycp";

include "security/widgets.ycp";
// map WIDGETS = CallFunction(`widgets());

/* Security
import "Security";
include "network/security/wizards.ycp";
*/

list args = Args();
if(size(args) <= 0) {
    y2error("Did not get the settings, probably some mistake...");
    return false;
}
if(!is(Args(0), map)) {
    y2error("Bad argument for security_auto: %1", Args(0));
    return false;
}

/* The settings are in the first argument */
map settings = select(args, 0, $[]);
y2debug("Imported: %1", settings);

/* Security
Security::Import(settings);
symbol ret = SecurityAutoSequence();
y2debug("ret=%1", ret);

y2milestone("Security auto finished");
if(ret == `next)
    return Security::Export();

return $[];
*/

y2debug("WIDGETS: %1",WIDGETS);
WIDGETS = settings2widgets(WIDGETS,settings);
y2debug("WIDGETS: %1",WIDGETS);
any ret = SecurityMainDialog(settings);
y2debug("WIDGETS: %1",WIDGETS);
if(ret == `ok) {
    settings = widgets2settings(LookupDefault(nil), WIDGETS);
    return settings;
}

y2milestone("Security auto finished");
y2milestone("----------------------------------------");

return $[];

/* EOF */
}
