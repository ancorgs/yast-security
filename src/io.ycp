/**
 * File:
 *   io.ycp
 *
 * Module:
 *   Security configuration
 *
 * Summary:
 *   Input and output functions
 *
 * Authors:
 *   Michal Svec <msvec@suse.cz>
 *
 * $Id$
 *
 * These functions are used for input and output of security
 * settings.
 *
 */

{

textdomain "security";
include "security/functions.ycp";

/**
 * Lookup the setting in the settings map.
 * If the item is empty, lookup the default setting
 * (its name is "Default").
 * @param item the item to be looked up
 * @return map the default settings
 */

global define LookupDefault(string item) ``{
  list settings = CallFunction(`settings());
  map default = find(`s,settings,``(lookup(s,"name")=="Default"));
  string def = lookup(default,"settings");
  map ret = find(`s,settings,``(lookup(s,"name")==def));
  map ret = lookup(ret,"settings");
  if(!isnil(item) && item!="")
    return lookup(ret,item);
  return ret;
};

/**
 * Read one setting from the SCR -- login.defs
 * @param item value to be written
 * @return string the item value
 */

global define ReadLoginDefs(string item) ``{
  string pth = ".etc.login_defs." + item;
  string ret = SCR(`Read(topath(pth)));
  if(isnil(ret)||ret == "")
    ret = LookupDefault(item);
  return ret;
};

/**
 * Read one setting from the SCR -- rc.config
 * @param item value to be written
 * @return string the item value
 */

global define ReadRcConfig(string item) ``{
  string pth = ".rc.system." + item;
  string ret = SCR(`Read(topath(pth)));
  if(isnil(ret))
    ret = LookupDefault(item);
  /*
  if(item=="ROOT_LOGIN_REMOTE") {
    if(ret=="yes") ret="no";
    else ret="yes";
  }
  */
  return ret;
};

/**
 * Write one setting into the SCR -- login.defs
 * @param m map with all security settings
 * @param item value to be written
 * @return boolean success
 */

global define WriteLoginDefs(map m, string item) ``{
  string pth = ".etc.login_defs." + item;
  string ret = lookup(m,item);
  if(isnil(ret))
    return nil;
  return SCR(`Write(topath(pth),ret));
};

/**
 * Write one setting into the SCR -- rc.config
 * @param m map with all security settings
 * @param item value to be written
 * @return boolean success
 */

global define WriteRcConfig(map m, string item) ``{
  string pth = ".rc.system." + item;
  string ret = lookup(m,item);
  if(isnil(ret))
    return nil;
  /*
  if(item=="ROOT_LOGIN_REMOTE") {
    if(ret=="no") ret="yes";
    else ret="no";
  }
  */
  return SCR(`Write(topath(pth),ret));
};

/**
 * Return all settings which are in rc.config
 * @return list rc.config settings
 */

global define RcConfig_settings() ``{
return [
  "CONSOLE_SHUTDOWN",
  "KDM_SHUTDOWN",
  "PERMISSION_SECURITY",
  "CWD_IN_ROOT_PATH",
  "RUN_UPDATEDB_AS",
  "ROOT_LOGIN_REMOTE",
  "PASSWD_USE_CRACKLIB"
];
};

/**
 * Return all settings which are in login.defs
 * @return list login.defs settings
 */

global define LoginDefs_settings() ``{
return [
  "FAILLOG_ENAB",
  "LASTLOG_ENAB",
  "FAIL_DELAY",
  "PASS_WARN_AGE",
  "OBSCURE_CHECKS_ENAB",
  "GID_MIN",
  "GID_MAX",
  "UID_MIN",
  "UID_MAX",
  "PASS_MIN_DAYS",
  "PASS_MAX_DAYS",
  "PASS_MIN_LEN",
  "PASS_MAX_LEN"
];
};

/**
 * Apply the read function to the list of variables
 * @param t the read function
 * @param l the list of variables
 * @param m the map to be updated and returned
 * @return map updated map of the read variables
 */

global define ApplyRead(term t, list l, map m) ``{
  m = foreach(`i, l, ``{
    term tt = add(t,i);
    m = add(m,i,eval(tt));
    return m;
  });
  return m;
};

/**
 * Apply the write function to the list of variables
 * @param t the write function
 * @param l the list of variables
 * @param m the map with variables and values
 * @return list sucesses of operations
 */

global define ApplyWrite(term t, list l, map m) ``{
  list ret = [];
  ret = foreach(`i, l, ``{
    term tt = add(add(t,m),i);
    ret = add(ret,eval(tt));
    return ret;
  });
  return ret;
};

/**
 * Fill the map of all security settings from the SCR
 * @return map all security settings
 */

global define SecurityRead() ``{
  map m = $[];
  m = ApplyRead(``(ReadLoginDefs()),LoginDefs_settings(),m);
  m = ApplyRead(``(ReadRcConfig()),RcConfig_settings(),m);
  return m;
};

/**
 * Update the SCR from the map of all security settings
 * @param m a map of all security settings
 * @return list successes of operations
 */

global define SecurityWrite(map m) ``{
  list l1 = ApplyWrite(``(WriteLoginDefs()),LoginDefs_settings(),m);
  list l2 = ApplyWrite(``(WriteRcConfig()),RcConfig_settings(),m);
  return flatten([l1,l2]);
};

/**
 * Write the security data from SCR to the disk
 * @return list success of operation
 */

global define SecurityFinish() ``{
  list ret = [];
  add(ret,SCR(`Write(.etc.login_defs,nil)));
  add(ret,SCR(`Write(.rc.system,nil)));
  add(ret,SCR(`Execute(.target.bash, "/sbin/SuSEconfig -quick --nonewpackage")));
  return ret;
};

} /* YaST2: Local security configuration EOF */
