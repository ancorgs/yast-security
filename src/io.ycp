/**
 * File:	include/security/io.ycp
 * Module:	Security configuration
 * Summary:	Input and output functions
 * Authors:	Michal Svec <msvec@suse.cz>
 *
 * $Id$
 *
 * These functions are used for input and output of security
 * settings.
 */

{

textdomain "security";

include "security/routines.ycp";
include "security/settings.ycp";

/**
 * Lookup the setting in the settings map.
 * If the item is empty, lookup the default setting
 * (its name is "Default").
 * @param item the item to be looked up
 * @return map the default settings
 */
global define LookupDefault(string item) ``{
    list settings = AllSecuritySettings();
    map default = find(`s,settings,``(lookup(s,"name","")=="Default"));
    string def = lookup(default,"settings","unknown");
    map ret = find(`s,settings,``(lookup(s,"name","")==def));
    ret = lookup(ret,"settings",$[]);
    if(item!=nil && item!="") return lookup(ret,item,$[]);
    return ret;
};

/**
 * Read one setting from the SCR -- login.defs
 * @param item value to be written
 * @return the item value
 */
global define string ReadLoginDefs(string item) ``{
    string pth = ".etc.login_defs." + item;
    string ret = SCR::Read(topath(pth));
    if(ret == nil || ret == "")
        ret = LookupDefault(item);
    return ret;
};

/**
 * Read one setting from the SCR -- /etc/sysconfig/security
 * @param item value to be written
 * @return the item value
 */
global define string ReadSysConfig(string p, string item) ``{
    string pth = ".sysconfig." + p + "." + item;
    string ret = SCR::Read(topath(pth));
    if(ret == nil || ret == "")
	ret = LookupDefault(item);
    else
	ret = tolower(ret);
    return ret;
};

/**
 * Write one setting into the SCR -- login.defs
 * @param m map with all security settings
 * @param item value to be written
 * @return boolean success
 */
global define WriteLoginDefs(map m, string item) ``{
    string pth = ".etc.login_defs." + item;
    string ret = lookup(m,item,"");
    if(ret=="")
        return nil;
    return SCR::Write(topath(pth),ret);
};

/**
 * Write one setting into the SCR -- /etc/sysconfig/security
 * @param m map with all security settings
 * @param item value to be written
 * @return boolean success
 */
global define WriteSysConfig(map m, string p, string item) ``{
    string pth = ".sysconfig." + p + "." + item;
    string ret = lookup(m,item,"");
    if(ret=="")
        return nil;
    return SCR::Write(topath(pth),ret);
};

/**
 * Return all settings which are in rc.config
 * @return list rc.config settings
 */
global define SettingsSysConfig() ``{
    return [
        "CWD_IN_ROOT_PATH",
	"DISPLAYMANAGER_REMOTE_ACCESS",
        "KDM_SHUTDOWN",
        "PERMISSION_SECURITY",
        "RUN_UPDATEDB_AS",
    ];
};

/**
 * Return all settings which are in login.defs
 * @return list login.defs settings
 */
global define SettingsLoginDefs() ``{
    return [
        "FAILLOG_ENAB",
        "FAIL_DELAY",
        "GID_MAX",
        "GID_MIN",
        "LASTLOG_ENAB",
        "OBSCURE_CHECKS_ENAB",
        "PASS_MAX_DAYS",
        "PASS_MAX_LEN",
        "PASS_MIN_DAYS",
        "PASS_MIN_LEN",
        "PASS_WARN_AGE",
        "UID_MAX",
        "UID_MIN"
    ];
};

/**
 * Apply the read function to the list of variables
 * @param t the read function
 * @param l the list of variables
 * @param m the map to be updated and returned
 * @return map updated map of the read variables
 */
global define ApplyRead(term t, list l, map m) ``{
    m = foreach(`i, l, ``{
        term tt = add(t,i);
        m = add(m,i,eval(tt));
        return m;
    });
    return m;
};

/**
 * Apply the write function to the list of variables
 * @param t the write function
 * @param l the list of variables
 * @param m the map with variables and values
 * @return list sucesses of operations
 */
global define ApplyWrite(term t, list l, map m) ``{
    list ret = [];
    ret = foreach(`i, l, ``{
        term tt = add(add(t,m),i);
        ret = add(ret,eval(tt));
        return ret;
    });
    return ret;
};

/**
 * Fill the map of all security settings from the SCR
 * @return map all security settings
 */
global define SecurityRead() ``{
    map m = $[];

    /* login.defs */
    m = ApplyRead(``(ReadLoginDefs()),SettingsLoginDefs(),m);

    /* sysconfig */
    // m = ApplyRead(``(ReadSysConfig()),SettingsSysConfig(),m);
    m = add(m, "PERMISSION_SECURITY", ReadSysConfig("security", "PERMISSION_SECURITY"));
    m = add(m, "CWD_IN_ROOT_PATH", ReadSysConfig("suseconfig", "CWD_IN_ROOT_PATH"));
    m = add(m, "KDM_SHUTDOWN", ReadSysConfig("displaymanager", "KDM_SHUTDOWN"));
    m = add(m, "DISPLAYMANAGER_REMOTE_ACCESS", ReadSysConfig("displaymanager", "DISPLAYMANAGER_REMOTE_ACCESS"));

    if(SCR::Read(.target.size, "/etc/sysconfig/locate") > 0)
	m = add(m, "RUN_UPDATEDB_AS", ReadSysConfig("locate", "RUN_UPDATEDB_AS"));

    /* inittab */
    list inittab = SCR::Dir(.etc.inittab);
    if(contains(inittab, "ca")) {
	string ca = SCR::Read(.etc.inittab.ca);
	if(issubstring(ca, "/bin/true") || issubstring(ca, "/bin/false"))
	    m = add(m, "CONSOLE_SHUTDOWN", "ignore");
	else if(issubstring(ca, "reboot") || issubstring(ca, " -r"))
	    m = add(m, "CONSOLE_SHUTDOWN", "reboot");
	else if(issubstring(ca, "halt") || issubstring(ca, " -h"))
	    m = add(m, "CONSOLE_SHUTDOWN", "halt");
	else {
	    y2error("Unknown ca status: %1", ca);
	    m = add(m, "CONSOLE_SHUTDOWN", "ignore");
	}
    }
    else
	m = add(m, "CONSOLE_SHUTDOWN", "ignore");

    /* pam stuff */
    map pam_unix_map = $[];
    list pam_list = SCR::Read(.pam.all.password.pam_unix2);
    if(pam_list != [] && pam_list != nil)
	pam_unix_map = select(pam_list,0,$[]);

    map pam_check_map = $[];
    pam_list = SCR::Read(.pam.all.password.pam_pwcheck);
    if(pam_list != [] && pam_list != nil)
	pam_check_map = select(pam_list,0,$[]);

    /* md5 support */
    boolean pam_support = contains(splitstring(lookup(pam_unix_map , "arguments", ""), " "), "md5");
    m = add(m,"MD5_SUPPORT", pam_support?"yes":"no");

    /* use cracklib? */
    pam_support = contains(splitstring(lookup(pam_check_map , "arguments", ""), " "), "use_cracklib");
    m = add(m,"PASSWD_USE_CRACKLIB", pam_support?"yes":"no");

    /* local permissions hack */
    string perm = lookup(m, "PERMISSION_SECURITY", "");
    if(issubstring(perm, "easy")) perm = "easy";
    else if(issubstring(perm, "paranoid")) perm = "paranoid";
    else if(issubstring(perm, "secure")) perm = "secure";
    else perm = "secure";
    m = add(m, "PERMISSION_SECURITY", perm);

    return m;
};

/**
 * Update the SCR from the map of all security settings and write
 * settings to the disk
 * @param m a map of all security settings
 * @return list successes of operations
 */
global define SecurityWrite(map m) ``{

    list ret = [];

    /* local permissions hack */
    string perm = lookup(m, "PERMISSION_SECURITY", "");
    m = add(m, "PERMISSION_SECURITY", perm + " local");

    /* login.defs */
    list l1 = ApplyWrite(``(WriteLoginDefs()),SettingsLoginDefs(),m);
    //list l2 = ApplyWrite(``(WriteSysConfig()),SettingsSysConfig(),m);
    //list ret = flatten([l1,l2]);
    //ret = add(ret,SCR::Write(.etc.login_defs,nil));
    //ret = add(ret,SCR::Write(.sysconfig.security,nil));

    /* sysconfig */
    WriteSysConfig(m, "security", "PERMISSION_SECURITY");
    WriteSysConfig(m, "suseconfig", "CWD_IN_ROOT_PATH");
    WriteSysConfig(m, "displaymanager", "KDM_SHUTDOWN");
    WriteSysConfig(m, "displaymanager", "DISPLAYMANAGER_REMOTE_ACCESS");
    WriteSysConfig(m, "locate", "RUN_UPDATEDB_AS");

    /* inittab */
    string ca = lookup(m, "CONSOLE_SHUTDOWN", "ignore");
    if(ca == "reboot")
	SCR::Write(.etc.inittab.ca, ":ctrlaltdel:/sbin/shutdown -r -t 4 now");
    else if(ca == "halt")
	SCR::Write(.etc.inittab.ca, ":ctrlaltdel:/sbin/shutdown -h -t 4 now");
    else
	SCR::Write(.etc.inittab.ca, ":ctrlaltdel:/bin/true");

    /* flush */
    SCR::Write(.etc.inittab,nil);
    SCR::Write(.etc.login_defs,nil);
    SCR::Write(.sysconfig.security,nil);
    SCR::Write(.sysconfig.suseconfig,nil);
    SCR::Write(.sysconfig.displaymanager,nil);
    SCR::Write(.sysconfig.locate,nil);

    /* md5 support */
    if (lookup(m, "MD5_SUPPORT", "no") == "yes") {
       ret = add(ret,SCR::Write(.pam.all.password.pam_unix2, "+md5"));
       ret = add(ret,SCR::Write(.pam.all.password.pam_pwcheck, "+md5"));
    }
    else {
       ret = add(ret,SCR::Write(.pam.all.password.pam_unix2, "-md5"));
       ret = add(ret,SCR::Write(.pam.all.password.pam_pwcheck, "-md5"));
       /* Remove old config options */
       ret = add(ret,SCR::Write(.pam.login.password.pam_pwcheck, "-md5"));
       ret = add(ret,SCR::Write(.pam.login.password.pam_unix, "-md5"));
       ret = add(ret,SCR::Write(.pam.passwd.password.pam_pwcheck, "-md5"));
       ret = add(ret,SCR::Write(.pam.passwd.password.pam_unix, "-md5"));
       ret = add(ret,SCR::Write(.pam.sshd.password.pam_pwcheck, "-md5"));
       ret = add(ret,SCR::Write(.pam.sshd.password.pam_unix, "-md5"));
       ret = add(ret,SCR::Write(.pam.rlogin.password.pam_pwcheck, "-md5"));
       ret = add(ret,SCR::Write(.pam.rlogin.password.pam_unix, "-md5"));
    }

    /* use cracklib? */
    string pam_string = (lookup(m,"PASSWD_USE_CRACKLIB","no")=="yes")?"+use_cracklib":"-use_cracklib";
    ret = add(ret,SCR::Write(.pam.all.password.pam_pwcheck, pam_string));

    /* finish him */
    ret = add(ret,SCR::Execute(.target.bash, "/sbin/SuSEconfig --module xdm"));
    ret = add(ret,SCR::Execute(.target.bash, "/sbin/SuSEconfig --module kde3"));
    ret = add(ret,SCR::Execute(.target.bash, "/sbin/SuSEconfig --module permissions"));
    ret = add(ret,SCR::Execute(.target.bash, "/sbin/SuSEconfig --module profiles"));
    return ret;
};

} /* YaST2: Local security configuration EOF */
