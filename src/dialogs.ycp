/**
 * File:	include/security/dialogs.ycp
 * Package:	Security configuration
 * Summary:	Dialogs definitions
 * Authors:	Michal Svec <msvec@suse.cz>
 *
 * $Id$
 */

{

textdomain "security";

import "Wizard";

/**
 * Read settings dialog
 * @return `next if success, else `abort
 */
global define symbol ReadDialog() ``{

    /* Read dialog help 1/2 */
    string help = _("<p><b><big>Initializing security configuration</big></b>
<br>Please wait...<br></p>") +

    /* Read dialog help 2/2 */
_("<p><b><big>Aborting the initialization:</big></b><br>
Safely abort the configuration utility by pressing <b>Abort</b> now.</p>");

    Security::AbortFunction = ``{return PollAbort();};
    boolean ret = Security::Read();
    return ret ? `next : `abort;
}

/**
 * Write settings dialog
 * @return `next if success, else `abort
 */
global define symbol WriteDialog() ``{

    /* Write dialog help 1/2 */
    string help = _("<p><b><big>Saving security configuration</big></b>
<br>Please wait...<br></p>") +

    /* Write dialog help 2/2 */
_("<p><b><big>Aborting saving:</big></b><br>
Abort saving by pressing <b>Abort</b>.</p>");

    Security::AbortFunction = ``{return PollAbort();};
    boolean ret = Security::Write();
    return ret ? `next : `abort;
}

/**
 */
global define BootDialog() ``{

    /* Boot dialog caption */
    string caption = "";

    /* Boot dialog help 1/3 */
    string help = "";

    /* Boot dialog contents */
    term contents = nil;

    Wizard::SetContentsButtons(caption,contents,help,
	    BackButtonLabel(),NextButtonLabel());

    any ret = nil;
    while(true) {
	ret = UI::UserInput();

	/* abort? */
	if(ret == `abort || ret == `cancel) {
	    if(ReallyAbort()) break;
	    else continue;
	}
	else if(ret == `back) {
	    break;
	}
	else if(ret == `next) {
	    /* FIXME: check_* */
	    break;
	}
	else {
	    y2error("Unexpected return code: %1", ret);
	    continue;
	}
    };

    if(ret == `next) {
	Security::xxx = UI::QueryWidget(`id(`xxx), `Value);
	// ...
    }

    return ret;
};

Wizard::CreateDialog();
any ret = WizardSequencer(aliases, sequence);
y2debug("ret=%1",ret);

/* EOF */
}
