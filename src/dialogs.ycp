/**
 * File:	include/security/dialogs.ycp
 * Package:	Security configuration
 * Summary:	Dialogs definitions
 * Authors:	Michal Svec <msvec@suse.cz>
 *
 * $Id$
 */

{

textdomain "security";

import "Wizard";

/**
 * Read settings dialog
 * @return `next if success, else `abort
 */
global define symbol ReadDialog() ``{
    Wizard::RestoreHelp(ReadDialogHelp());
    // Abort handling
    boolean ret = Security::Read( callback );
    return ret ? `next : `abort;
}

/**
 * Write settings dialog
 * @return `next if success, else `abort
 */
global define symbol WriteDialog() ``{
    Wizard::RestoreHelp(WriteDialogHelp());
    // Abort handling
    boolean ret = Security::Write( callback );
    return ret ? `next : `abort;
}

/**
 * Main dialog
 * @return Returned value from UserInput() call
 */
global define any DetectedDialog() ``{
    string caption = _("Security setup");
    // TODO FIXME modify the following according to your needs
    term contents =
	Wizard_hw::DetectedContent(_("Security to configure"),
				   [],
				   false,
				   Security::Summary());

    Wizard::SetContentsButtons( caption,
				contents,
				DetectedDialogHelp(),
				BackButtonLabel(),
				FinishButtonLabel() );

    any ret = nil;
    while(true)
    {
	ret = UI::UserInput();
	if(ret == `abort)
	{
	    // TODO FIXME: check for change of the configuration
	    if( UI::ReallyAbortPopup( true ) )
		break;
	    else
		continue;
	}
	else
	{
	    /* TODO FIXME: your code ... */
	    break;
	}
    };

    return ret;
}

/**
 * Overview dialog
 * @return any Returned value from UserInput() call
 */
global define any OverviewDialog() ``{
    string caption = _("Security overview");
    // TODO FIXME: real data for the table
    term contents =
						 // For translators: Header of the table with installed cards
	Wizard_hw::ConfiguredContent( `header( _("Number"),
						 // For translators: Header of the table with installed cards
						 _("Security")),
						 [],
						 nil, nil, nil, nil );
    contents = Wizard_hw::SpacingAround( contents, 1.5, 1.5, 1.0, 1.0 );


    Wizard::SetContentsButtons( caption,
				contents,
				OverviewDialogHelp(),
				BackButtonLabel(),
				FinishButtonLabel() );

    any ret = nil;
    while(true)
    {
	ret = UI::UserInput();
	if(ret == `abort)
	{
	    // TODO FIXME: check for change of the configuration
	    if( UI::ReallyAbortPopup( true ) )
		break;
	    else
		continue;
	}
	else
	{
	    /* TODO FIXME: your code ... */
	    break;
	}
    };

    return ret;
}

/**
 * Configure1 dialog
 * @return any Returned value from UserInput() call
 * TODO FIXME: A more descriptive name for the dialog
 */
global define any Configure1Dialog() ``{
    // TODO FIXME: real configuration workflow
    string caption = _("Security configure1");
    term contents = `Label(_("First part of configuration of security"));

    Wizard::SetContentsButtons( caption,
				contents,
				Configure1DialogHelp(),
				BackButtonLabel(),
				NextButtonLabel() );

    any ret = nil;
    while(true)
    {
	ret = UI::UserInput();
	if(ret == `abort)
	{
	    // TODO FIXME: check for change of the configuration
	    if( UI::ReallyAbortPopup( true ) )
		break;
	    else
		continue;
	}
	else
	{
	    /* TODO FIXME: your code ... */
	    break;
	}
    };

    return ret;
}

/**
 * Configure2 dialog
 * @return any Returned value from UserInput() call
 * TODO FIXME: A more descriptive name for the dialog
 */
global define any Configure2Dialog() ``{
    // TODO FIXME: real configuration workflow
    string caption = _("Security configure2");
    term contents = `Label(_("Second part of configuration of security"));

    Wizard::SetContentsButtons( caption,
				contents,
				Configure2DialogHelp(),
				BackButtonLabel(),
				NextButtonLabel() );

    any ret = nil;
    while(true)
    {
	ret = UI::UserInput();
	if(ret == `abort)
	{
	    // TODO FIXME: check for change of the configuration
	    if( UI::ReallyAbortPopup( true ) )
		break;
	    else
		continue;
	}
	else
	{
	    /* TODO FIXME: your code ... */
	    break;
	}
    };

    return ret;
}

/* EOF */
}
